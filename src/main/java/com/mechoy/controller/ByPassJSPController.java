package com.mechoy.controller;

import com.mechoy.bean.BypassBean;
import com.mechoy.bean.ResponseBean;
import com.mechoy.service.BypassWebShellService;
import com.mechoy.service.impl.BypassWebShellServiceImpl;
import com.mechoy.utils.FileUtils;
import com.mechoy.utils.NotificationUtils;
import com.mechoy.utils.PropertiesUtils;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.geometry.Pos;
import javafx.scene.control.*;
import javafx.scene.input.Clipboard;
import javafx.scene.input.ClipboardContent;
import javafx.scene.input.MouseEvent;
import javafx.stage.FileChooser;
import javafx.stage.Stage;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Arrays;
import java.util.List;

public class ByPassJSPController {

    @FXML
    private ChoiceBox<String> bypassCommonTypeChoiceItem;

    @FXML
    private TextArea bypassNoticeTextArea;

    @FXML
    private ChoiceBox<String> bypassTomcatTypeChoiceItem;

    @FXML
    private TextArea bypassTomcatWebShellTextArea;

    @FXML
    private TextArea bypassWebShellTextArea;

    @FXML
    private TextArea originalTomcatWebshellTextArea;

    @FXML
    private TextArea originalWebshellTextArea;

    @FXML
    private TextArea webShellTextArea;

    @FXML
    private TreeView<File> webShellTreeView;

    @FXML
    private Button webshellOpenFileButton;

    @FXML
    private Button webshellTomcatOpenFileButton;


    private BypassWebShellService bypassWebShellService = null;

    private BypassBean bypassBean = new BypassBean();

    private ResponseBean responseBean = null;

    private String readFilePath = System.getProperty("user.home");


    /**
     * Tomcat专用打开文件按钮
     *
     * @param event
     */
    @FXML
    void onBypassTomcatWebshellOpenFileButton(ActionEvent event) {
        openFileChooser(webshellTomcatOpenFileButton, originalTomcatWebshellTextArea);
    }


    /**
     * 通用生成免杀按钮
     *
     * @param event
     */
    @FXML
    void onBypassWebshellGenerateButton(ActionEvent event) {
        String bypassCommonType = bypassCommonTypeChoiceItem.getValue();
        String webShell = originalWebshellTextArea.getText();
        bypassBean.setBypassType(bypassCommonType);
        bypassBean.setInitialWebShell(webShell);

        if (bypassWebShellService == null) {
            bypassWebShellService = new BypassWebShellServiceImpl();
        }
        responseBean = bypassWebShellService.generateBypassWebShell(bypassBean);
        if (responseBean.getStatus() == 200) {
            bypassWebShellTextArea.setText(responseBean.getResult());
        } else {
            NotificationUtils.showNotification(responseBean.getError(), Pos.CENTER);
        }
    }

    /**
     * Tomcat专用生成免杀按钮
     *
     * @param event
     */
    @FXML
    void onBypassTomcatWebshellGenerateButton(ActionEvent event) {
        String bypassCommonType = bypassTomcatTypeChoiceItem.getValue();
        String webShell = originalTomcatWebshellTextArea.getText();
        bypassBean.setBypassType(bypassCommonType);
        bypassBean.setInitialWebShell(webShell);

        if (bypassWebShellService == null) {
            bypassWebShellService = new BypassWebShellServiceImpl();
        }
        responseBean = bypassWebShellService.generateTomcatBypassWebShell(bypassBean);
        if (responseBean.getStatus() == 200) {
            bypassTomcatWebShellTextArea.setText(responseBean.getResult());
        } else {
            NotificationUtils.showNotification(responseBean.getError(), Pos.CENTER);
        }
    }

    /**
     * 从文件打开指定的webShell，并显示在上层文本框中
     *
     * @param event
     */
    @FXML
    void onBypassWebshellOpenFileButton(ActionEvent event) {
        openFileChooser(webshellOpenFileButton, originalWebshellTextArea);
    }

    /**
     * 同用保存到指定的文件
     *
     * @param event
     */
    @FXML
    void onBypassWebShellSaveToFileButton(ActionEvent event) {
        saveToFil(webshellOpenFileButton);
    }

    /**
     * Tomcat专用免杀webshell保存至文件
     * @param event
     */
    @FXML
    void onBypassTomcatWebShellSaveToFileButton(ActionEvent event) {
        saveToFil(webshellTomcatOpenFileButton);
    }

    /**
     * 保存生成的免杀WebShell结果，按照字节保存
     * @param button 根据按钮进行定位
     */
    void saveToFil(Button button){
        Stage stage = (Stage) button.getScene().getWindow();

        byte[] resultByte = responseBean.getResultByte();

        // 创建一个 FileChooser 对象
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Save File");

        // 设置默认保存目录（可选）
        fileChooser.setInitialDirectory(new File(System.getProperty("user.home")));

        // 显示保存文件对话框
        File file = fileChooser.showSaveDialog(stage);

        // 检查用户是否选择了文件
        if (file != null) {
            FileUtils.saveByteToFile(resultByte, file);
        }
    }

    /**
     * 直接获取webshell的复制页面
     *
     * @param event
     */
    @FXML
    void onWebShellCopyButton(ActionEvent event) {
        // 获取系统剪贴板
        Clipboard clipboard = Clipboard.getSystemClipboard();
        ClipboardContent content = new ClipboardContent();

        // 将指定文本放入剪贴板,对内容进行去空处理
        String result = webShellTextArea.getText().trim();
        if (result.isEmpty()) {
            return;
        }
        content.putString(result);
        clipboard.setContent(content);
    }


    /**
     * 递归方法，用于填充子目录和文件
     *
     * @param parentItem
     * @param directory
     */
    private void populateTreeItem(TreeItem<File> parentItem, File directory) {
        File[] files = directory.listFiles();
        if (files != null) {
            for (File file : files) {
                TreeItem<File> childItem = new TreeItem<>(file);
                parentItem.getChildren().add(childItem);
                if (file.isDirectory()) {
                    populateTreeItem(childItem, file); // 递归处理子目录
                }
            }
        }
    }


    @FXML
    public void initialize() {
        // 初始化值
        initializeValues();

        // 初始化相关组件的配置
        initialComponentConfiguration();
    }

    /**
     * 初始化免杀页面的值
     */
    private void initializeValues() {
        // [免杀类型]bypassCommonTypeChoiceItem进行初始化
        String bypassCommonTypeItems = PropertiesUtils.getProperties("global", "bypass.common.type").trim();
        bypassCommonTypeChoiceItem.getItems().addAll(Arrays.asList(bypassCommonTypeItems.split(",")));
        // 默认显示第一个值
        if (!bypassCommonTypeChoiceItem.getItems().isEmpty()) {
            bypassCommonTypeChoiceItem.setValue(bypassCommonTypeItems.substring(0, bypassCommonTypeItems.indexOf(",")));
        }

        // [Tomcat免杀类型]bypassTomcatTypeChoiceItem进行初始化
        String bypassTomcatTypeItems = PropertiesUtils.getProperties("global", "bypass.tomcat.type").trim();
        bypassTomcatTypeChoiceItem.getItems().addAll(Arrays.asList(bypassTomcatTypeItems.split(",")));
        // 默认显示第一个值
        if (!bypassTomcatTypeChoiceItem.getItems().isEmpty()) {
            bypassTomcatTypeChoiceItem.setValue(bypassTomcatTypeItems.substring(0, bypassTomcatTypeItems.indexOf(",")));
        }

        // 初始化webShellTreeView
        initWebShellTreeView();
    }

    /**
     * 初始化文件树
     */
    private void initWebShellTreeView() {
        File rootDirectory = new File("./bypassWebShell");

        // 设置根节点为空
        TreeItem<File> rootItem = new TreeItem<>();
        webShellTreeView.setRoot(rootItem);
        webShellTreeView.setShowRoot(false); // 隐藏根节点，只显示子节点

        // 添加子目录作为TreeView的根节点
        if (rootDirectory.isDirectory()) {
            File[] subDirectories = rootDirectory.listFiles(File::isDirectory);
            if (subDirectories != null) {
                for (File subDirectory : subDirectories) {
                    TreeItem<File> subDirectoryItem = new TreeItem<>(subDirectory);
                    rootItem.getChildren().add(subDirectoryItem);
                    populateTreeItem(subDirectoryItem, subDirectory); // 递归填充子目录
                }
            }
        }

        // 自定义显示的内容为文件名称
        webShellTreeView.setCellFactory(tv -> new javafx.scene.control.TreeCell<File>() {
            @Override
            protected void updateItem(File item, boolean empty) {
                super.updateItem(item, empty);
                if (empty || item == null) {
                    setText(null);
                } else {
                    setText(item.getName()); // 仅显示文件名或目录名
                }
            }
        });

        // 添加点击事件处理
        webShellTreeView.addEventHandler(MouseEvent.MOUSE_CLICKED, event -> {
            TreeItem<File> selectedItem = webShellTreeView.getSelectionModel().getSelectedItem();
            if (selectedItem != null) {
                File selectedFile = selectedItem.getValue();
                if (selectedFile.isFile()) {
                    // 读取并显示文件内容
                    try {
                        String content = new String(Files.readAllBytes(selectedFile.toPath()));
                        String webShell = "";
                        String notice = "没有注意事项";
                        if (content.contains(">>>---<<<")) {
                            webShell = content.split(">>>---<<<")[0];
                            notice = content.split(">>>---<<<")[1];
                        } else {
                            webShell = content;
                        }
                        webShellTextArea.setText(webShell);
                        bypassNoticeTextArea.setText(notice.trim());
                    } catch (IOException e) {
                        NotificationUtils.showNotification("获取文件错误", Pos.CENTER);
                    }
                }
            }
        });
    }
    /**
     * 其他的一些配置的初始化
     */
    private void initialComponentConfiguration() {
        // 设置自动换行
        originalWebshellTextArea.setWrapText(true);
        bypassWebShellTextArea.setWrapText(true);
    }

    /**
     * 打开文件选择框
     *
     * @param button   打开文件选择的按钮
     * @param textArea 输出选择文件内容的文本框
     */
    void openFileChooser(Button button, TextArea textArea) {
        // 针对不同的Tab时，需要每一次进行重置stage
        Stage stage = (Stage) button.getScene().getWindow();
        // 创建FileChooser
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("选择文件");

        // 设置默认保存目录（可选）
        fileChooser.setInitialDirectory(new File(readFilePath));

        // 显示保存文件对话框
        File file = fileChooser.showOpenDialog(stage);
        if (file != null) {
            // 将文件内容显示在TextArea中
            try {
                Path filePath = file.toPath();
                List<String> lines = Files.readAllLines(filePath);
                String content = String.join("\n", lines);
                textArea.setText(content);

                // 更新按钮的文本为文件的绝对路径
                button.setText(filePath.toAbsolutePath().toString());
                // 更新下一次文件读取的路径
                readFilePath = filePath.getParent().toString();
            } catch (IOException e) {
                e.printStackTrace();
                textArea.setText("无法读取文件内容。");
            }
        }
    }
}
