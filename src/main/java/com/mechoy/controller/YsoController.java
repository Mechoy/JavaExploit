package com.mechoy.controller;

import com.mechoy.bean.ResponseBean;
import com.mechoy.bean.YsoGadgetBean;
import com.mechoy.service.CreateYsoserialService;
import com.mechoy.service.impl.CreateYsoserialServiceImpl;
import com.mechoy.utils.FileUtils;
import com.mechoy.utils.NotificationUtils;
import com.mechoy.utils.PropertiesUtils;
import javafx.event.ActionEvent;
import javafx.event.Event;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.geometry.Pos;
import javafx.scene.Parent;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.input.Clipboard;
import javafx.scene.input.ClipboardContent;
import javafx.scene.layout.AnchorPane;
import javafx.scene.text.Text;
import javafx.stage.FileChooser;
import javafx.stage.Stage;

import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.Arrays;
import java.util.UUID;

public class YsoController {

    private Stage stage;

    public void setStage(Stage stage) {
        this.stage = stage;
    }

    @FXML
    private TextField ysoCmdField;      // 反序列化将要执行的命令

    @FXML
    private TextArea ysoOutputTextArea;     // 反序列化输出的窗口

    @FXML
    private ChoiceBox<String> ysoGadgetChoiceItem;  // 反序列化链

    @FXML
    private ChoiceBox<String> ysoTypeChoiceItem;    // 实现的目的,命令执行或是打内存马

    @FXML
    private ChoiceBox<String> ysoEchoTypeChoiceItem;    // 回显类型

    @FXML
    private ChoiceBox<String> ysoOutputEncodingTypeChoiceItem;      // 输出编码

    @FXML
    private Text ysoResultLength;   // 输出生成的payload长度

    @FXML
    private ChoiceBox<String> ysoMemShellTypeChoiceItem; // 内存马类型

    @FXML
    private TextField ysoMemShellPathField; // 内存马访问路径

    @FXML
    private TextField ysoMemShellPassField; //  内存马链接密码

    @FXML
    private TextField ysoMemShellKeyField;

    @FXML
    private TextField ysoMemShellHeaderKeyField;

    @FXML
    private TextField ysoMemShellHeaderValueField;

    @FXML
    private AnchorPane bypassJspAnchorPane;

    @FXML
    private AnchorPane aboutAnchorPane;

    @FXML
    private AnchorPane historyAnchorPane;

    @FXML
    private AnchorPane payloadManagerAnchorPane;

    private YsoGadgetBean ysoGadgetBean;

    private CreateYsoserialService createYsoserialService;    // 服务端

    private ResponseBean responseBean;  // 回显响应

    private boolean bypassTab = true;   // 另外的tab只需加载一次即可

    private boolean aboutTab = true;   // 另外的aboutTab只需加载一次即可

    private boolean payloadManagerTab = true;   // 另外的aboutTab只需加载一次即可

    private boolean historyTab = true;


    /**
     * 对应生成反序列化链的按钮,并输出生成结果
     *
     * @param event
     */
    @FXML
    void onYsoCreateButton(ActionEvent event) {
        if (createYsoserialService == null) {
            createYsoserialService = new CreateYsoserialServiceImpl();
        }

        // 先判断大类型，命令执行还是内存马
        if (ysoTypeChoiceItem.getValue().equals("CommandExecution")) {
            ysoGadgetBean = new YsoGadgetBean(ysoTypeChoiceItem.getValue());
            ysoGadgetBean.setGadget(ysoGadgetChoiceItem.getValue());
            ysoGadgetBean.setCommand(ysoCmdField.getText());
            ysoGadgetBean.setEchoType(ysoEchoTypeChoiceItem.getValue());
            ysoGadgetBean.setOutputType(ysoOutputEncodingTypeChoiceItem.getValue());
            this.responseBean = createYsoserialService.generateCommand(ysoGadgetBean);
        } else if (ysoTypeChoiceItem.getValue().equals("MemoryShell")) {
            // 有一些链暂不支持执行注入内存马 需要提前进行结束
            String notMemShellGadget = PropertiesUtils.getProperties("global", "yso.no.not.supported.memShell.gadget").trim();
            if (notMemShellGadget.contains(ysoGadgetChoiceItem.getValue())) {
                NotificationUtils.showNotification("该反序列化链暂不支持执行注入内存马", Pos.CENTER);
                return;
            }

            ysoGadgetBean = new YsoGadgetBean(ysoTypeChoiceItem.getValue());
            ysoGadgetBean.setGadget(ysoGadgetChoiceItem.getValue());

            // 获取内存马相关配置
            ysoGadgetBean.setMemShellType(ysoMemShellTypeChoiceItem.getValue());
            ysoGadgetBean.setMemShellPass(ysoMemShellPassField.getText());
            ysoGadgetBean.setMenShellPath(ysoMemShellPathField.getText());

            ysoGadgetBean.setMemShellKey(ysoMemShellKeyField.getText());
            ysoGadgetBean.setMemShellHeaderKey(ysoMemShellHeaderKeyField.getText());
            ysoGadgetBean.setMemShellHeaderValue(ysoMemShellHeaderValueField.getText());

            ysoGadgetBean.setOutputType(ysoOutputEncodingTypeChoiceItem.getValue());
            this.responseBean = createYsoserialService.generateMemShell(ysoGadgetBean);
        }

        if (this.responseBean.getStatus() == 200) {
            resultOutput(this.responseBean.getResult());
        } else {
            NotificationUtils.showNotification(this.responseBean.getError(), Pos.CENTER);
        }

    }

    /**
     * 对应随机生成内存马相关配置信息
     *
     * @param event
     */
    @FXML
    void onGenerateMemShellInfoButton(ActionEvent event) {
        // 先清空所有值
        ysoMemShellPathField.clear();
        ysoMemShellPassField.clear();
        ysoMemShellKeyField.clear();
        ysoMemShellHeaderKeyField.clear();
        ysoMemShellHeaderValueField.clear();

        UUID uuid = UUID.randomUUID();
        String replace = uuid.toString().replace("-", "");

        ysoMemShellPathField.setText("/" + replace.substring(0, 16));
        ysoMemShellPassField.setText(replace.substring(8, 24));
        ysoMemShellKeyField.setText(replace.substring(16, 32));

        ysoMemShellHeaderKeyField.setText("User-Agent");

        ysoMemShellHeaderValueField.setText("Chrome" + replace.substring(28, 32));
    }

    /**
     * 将生成的结果复制到剪贴板
     *
     * @param event
     */
    @FXML
    void ysoCopyResultButton(ActionEvent event) {
        // 获取系统剪贴板
        Clipboard clipboard = Clipboard.getSystemClipboard();
        ClipboardContent content = new ClipboardContent();

        // 将指定文本放入剪贴板,对内容进行去空处理
        String result = ysoOutputTextArea.getText().trim();
        if (result.isEmpty()) {
            return;
        }
        content.putString(result);
        clipboard.setContent(content);

    }

    /**
     * 先清空，再输出，同时更改payload长度的显示
     *
     * @param s 结果字符串
     */
    private void resultOutput(String s) {
        ysoOutputTextArea.clear();
        ysoOutputTextArea.setText(s);

        ysoResultLength.setText(String.valueOf(ysoOutputTextArea.getText().trim().length()));
    }

    /**
     * 将反序列化生成的结果保存到指定文件
     * 当前为保存字节数组
     *
     * @param event
     */
    @FXML
    void ysoResultSaveToFileButton(ActionEvent event) {
        // 保存时采用字节数组的方式存储
        // 会先对ysoOutputTextArea中的内容进行解码操作，解码至byte[]，然后再进行存储
        byte[] contentToSave = responseBean.getResultByte();

        // 创建一个 FileChooser 对象
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Save File");

        // 设置默认保存目录（可选）
        fileChooser.setInitialDirectory(new File(System.getProperty("user.home")));

        // 显示保存文件对话框
        File file = fileChooser.showSaveDialog(stage);

        // 检查用户是否选择了文件
        if (file != null) {
            FileUtils.saveByteToFile(contentToSave, file);
        }
    }

    /**
     * 初始化操作
     */
    @FXML
    public void initialize() {

        // 在这里进行 UI 组件的值进行初始化
        initializeValues();
    }


    /**
     * 初始化值，从配置文件的global读取并进行初始化
     */
    public void initializeValues() {
        // [反序列化链]ysoGadgetChoiceItem进行初始化
        String ysoGadgetItems = PropertiesUtils.getProperties("global", "yso.gadget.choice.item").trim();
        ysoGadgetChoiceItem.getItems().addAll(Arrays.asList(ysoGadgetItems.split(",")));
        // 默认显示第一个值
        if (!ysoGadgetChoiceItem.getItems().isEmpty()) {
            ysoGadgetChoiceItem.setValue(ysoGadgetItems.substring(0, ysoGadgetItems.indexOf(",")));
        }

        // [实现的目的,命令执行或是打内存马]ysoTypeChoiceItem进行初始化
        String ysoTypeItems = PropertiesUtils.getProperties("global", "yso.type.choice.item");
        ysoTypeChoiceItem.getItems().addAll(Arrays.asList(ysoTypeItems.split(",")));
        // 默认显示第一个值
        if (!ysoTypeChoiceItem.getItems().isEmpty()) {
            ysoTypeChoiceItem.setValue(ysoTypeItems.substring(0, ysoTypeItems.indexOf(",")));
        }

        // [回显类型]ysoEchoTypeChoiceItem进行初始化
        String ysoEchoTypeItems = PropertiesUtils.getProperties("global", "yso.echo.type.choice.item").trim();
        ysoEchoTypeChoiceItem.getItems().addAll(Arrays.asList(ysoEchoTypeItems.split(",")));
        // 默认显示第一个值
        if (!ysoEchoTypeChoiceItem.getItems().isEmpty()) {
            ysoEchoTypeChoiceItem.setValue(ysoEchoTypeItems.substring(0, ysoEchoTypeItems.indexOf(",")));
        }

        // [输出编码]对反序列化生成的字节数组进行输出,默认输出base64+url
        String ysoOutputEncodingTypeItems = PropertiesUtils.getProperties("global", "yso.output.encoding.type.choice.item");
        ysoOutputEncodingTypeChoiceItem.getItems().addAll(Arrays.asList(ysoOutputEncodingTypeItems.split(",")));
        // 默认显示第一个值
        if (!ysoOutputEncodingTypeChoiceItem.getItems().isEmpty()) {
            ysoOutputEncodingTypeChoiceItem.setValue(ysoOutputEncodingTypeItems.substring(0, ysoOutputEncodingTypeItems.indexOf(",")));
        }

        // [内存马类型]对ysoMemShellTypeChoiceItem进行初始化
        String ysoMemShellTypeItems = PropertiesUtils.getProperties("global", "yso.memShell.type.choice.item").trim();
        ysoMemShellTypeChoiceItem.getItems().addAll(Arrays.asList(ysoMemShellTypeItems.split(",")));
        // 默认显示第一个值
        if (!ysoMemShellTypeChoiceItem.getItems().isEmpty()) {
            ysoMemShellTypeChoiceItem.setValue(ysoMemShellTypeItems.substring(0, ysoMemShellTypeItems.indexOf(",")));
        }

        // 设置反序列化结果输出窗口自动换行
        ysoOutputTextArea.setWrapText(true);

        // 初始化当前payload长度的值
        ysoResultLength.setText(String.valueOf(ysoOutputTextArea.getText().trim().length()));

        // 初始化history页面
        loadOtherTab(historyAnchorPane,"history.fxml");

    }

    /**
     * 加载webShell页面
     *
     * @param event
     */
    @FXML
    void onBypassJSPButton(Event event) {
        if (bypassTab) {
            loadOtherTab(bypassJspAnchorPane, "bypass-jsp.fxml");
            bypassTab = false;
        }
    }

    /**
     * 加载关于页面
     *
     * @param event
     */
    @FXML
    void onAboutButton(Event event) {
        if (aboutTab) {
            loadOtherTab(aboutAnchorPane, "about.fxml");
            aboutTab = false;
        }

    }

    @FXML
    void onPayloadManagerButton(Event event) {
        if (payloadManagerTab) {
            loadOtherTab(payloadManagerAnchorPane, "payload-manager.fxml");
            payloadManagerTab = false;
        }
    }

    void loadOtherTab(AnchorPane anchorPane, String fxml) {
        try {
            URL fxmlLocation = getClass().getResource("/ui/" + fxml);
            if (fxmlLocation == null) {
                NotificationUtils.showNotification("页面加载异常", Pos.CENTER);
            }
            FXMLLoader fxmlLoader = new FXMLLoader();
            fxmlLoader.setLocation(getClass().getResource("/ui/" + fxml));
            Parent root = fxmlLoader.load();


            // 将内容添加到AnchorPane中
            anchorPane.getChildren().clear(); // 清空当前内容
            anchorPane.getChildren().add(root);
            // 将内容锚定到AnchorPane的四个边
            AnchorPane.setTopAnchor(root, 0.0);
            AnchorPane.setBottomAnchor(root, 0.0);
            AnchorPane.setLeftAnchor(root, 0.0);
            AnchorPane.setRightAnchor(root, 0.0);

        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

}
