package com.mechoy.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.mechoy.bean.TreeNodeBean;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.Node;
import javafx.scene.control.CheckBoxTreeItem;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.TreeItem;
import javafx.stage.Stage;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

public class AddPayloadController {

    private CheckBoxTreeItem<TreeNodeBean> selectedItem;

    @FXML
    private TextArea addPayloadBody;

    @FXML
    private TextField addPayloadName;

    @FXML
    void addPayloadCancel(ActionEvent event) {
        // 获取当前窗口的引用并关闭
        Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
        stage.close();
    }

    @FXML
    void addPayloadSaveButton(ActionEvent event) {
        String payloadName = addPayloadName.getText();
        String payloadBody = addPayloadBody.getText();
        TreeNodeBean newNode = new TreeNodeBean(payloadName);
        if (payloadBody.isEmpty()) {
            newNode.setGroup(true);
        }
        CheckBoxTreeItem<TreeNodeBean> newItem = new CheckBoxTreeItem<>(newNode);


        selectedItem.getChildren().add(newItem);
        selectedItem.getValue().getChildren().add(newNode);

        CheckBoxTreeItem<TreeNodeBean> parent = (CheckBoxTreeItem<TreeNodeBean>) selectedItem.getParent();
        if (parent != null) {
            while (parent.getParent() != null) {
                parent = (CheckBoxTreeItem<TreeNodeBean>) parent.getParent();
            }
            ObservableList<TreeItem<TreeNodeBean>> children = parent.getChildren();
            saveTreeToJson("./config/payloadManager.json", children);
        } else {
            ObservableList<TreeItem<TreeNodeBean>> children = selectedItem.getChildren();
            saveTreeToJson("./config/payloadManager.json", children);
        }

        // 计算payloadBody的存储路径,并存储
        savePayloadBody(payloadName, payloadBody);

        addPayloadCancel(event);
    }

    private void savePayloadBody(String payloadName, String payloadBody) {
        String basePath = "./config/allPayload/";
        String filePath = "";
        if (!payloadBody.isEmpty()) {
            filePath = payloadName + ".txt";
            if (!selectedItem.getValue().getName().equals("All Payload")) {
                filePath = selectedItem.getValue().getName() + "/" + filePath;
                CheckBoxTreeItem<TreeNodeBean> parent = (CheckBoxTreeItem<TreeNodeBean>) selectedItem.getParent();
                while (!parent.getValue().getName().equals("All Payload")) {
                    filePath = parent.getValue().getName() + "/" + filePath;
                    parent = (CheckBoxTreeItem<TreeNodeBean>) parent.getParent();
                }
            }
            File file = new File(basePath + filePath);

            try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
                writer.write(payloadBody);
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
            filePath = payloadName;
            if (!selectedItem.getValue().getName().equals("All Payload")) {
                filePath = selectedItem.getValue().getName() + "/" + filePath;
                CheckBoxTreeItem<TreeNodeBean> parent = (CheckBoxTreeItem<TreeNodeBean>) selectedItem.getParent();
                while (!parent.getValue().getName().equals("All Payload")) {
                    filePath = parent.getValue().getName() + "/" + filePath;
                    parent = (CheckBoxTreeItem<TreeNodeBean>) parent.getParent();
                }
            }
            File file = new File(basePath + filePath);
            if (!file.exists()) {
                file.mkdir();
            }
        }
    }

    public CheckBoxTreeItem<TreeNodeBean> getRootItem() {
        return selectedItem;
    }

    public void setSelectedItem(CheckBoxTreeItem<TreeNodeBean> selectedItem) {
        this.selectedItem = selectedItem;
    }

    private void saveTreeToJson(String jsonFile, ObservableList<TreeItem<TreeNodeBean>> value) {
        ObjectMapper objectMapper = new ObjectMapper();
        try {
            // 将 ObservableList 转换为 TreeNodeBean 数组
            TreeNodeBean[] nodeArray = new TreeNodeBean[value.size()];

            for (int i = 0; i < value.size(); i++) {
                nodeArray[i] = value.get(i).getValue(); // 获取 TreeItem 中的 TreeNodeBean
            }

//            TreeNodeBean rootNode = rootItem.getValue();
            objectMapper.writeValue(new File(jsonFile), nodeArray);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
