package com.mechoy.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.mechoy.bean.TreeNodeBean;
import com.mechoy.utils.FileUtils;
import com.mechoy.utils.NotificationUtils;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.geometry.Pos;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.input.MouseButton;
import javafx.scene.layout.AnchorPane;
import javafx.stage.Modality;
import javafx.stage.Stage;
import org.controlsfx.control.CheckTreeView;

import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.nio.file.Paths;
import java.util.List;

public class PayloadManagerController {
    @FXML
    private CheckTreeView<TreeNodeBean> payloadSelectTreeView;

    @FXML
    private TextArea payloadManagerTextArea;

    private CheckBoxTreeItem<TreeNodeBean> rootItem;

    private static final String JSON_FILE = "config/payloadManager.json";

    @FXML
    public void initialize() {

        // 在这里进行 UI 组件的值进行初始化
        initializeValues();
    }

    void initializeValues() {


        // 从 JSON 文件加载树结构
        try {
            TreeNodeBean rootTreeNodeBean = new TreeNodeBean("All Payload");
            rootTreeNodeBean.setGroup(true);
            rootItem = new CheckBoxTreeItem<>(rootTreeNodeBean);
            loadTreeFromJson(JSON_FILE);
            rootItem.setExpanded(true);
            payloadSelectTreeView.setRoot(rootItem);

            // 创建右键菜单
            ContextMenu contextMenu = new ContextMenu();
            MenuItem deleteItem = new MenuItem("Delete");
            MenuItem addItem = new MenuItem("Add");
            contextMenu.getItems().add(addItem);
            contextMenu.getItems().add(deleteItem);


            payloadSelectTreeView.setOnMouseClicked(event -> {
                // 添加右键点击事件
                if (event.getButton() == MouseButton.SECONDARY) { // 右键点击
                    CheckBoxTreeItem<TreeNodeBean> selectedItem = (CheckBoxTreeItem<TreeNodeBean>) payloadSelectTreeView.getSelectionModel().getSelectedItem();
                    if (selectedItem != null) {
                        contextMenu.show(payloadSelectTreeView, event.getScreenX(), event.getScreenY());
                    }
                    return;
                }
                // 添加双击事件
                if (event.getClickCount() == 2) { // 检测双击
                    CheckBoxTreeItem<TreeNodeBean> selectedItem = (CheckBoxTreeItem<TreeNodeBean>) payloadSelectTreeView.getSelectionModel().getSelectedItem();
                    if (selectedItem != null && selectedItem.getChildren().isEmpty()) {
                        TreeNodeBean node = selectedItem.getValue();
                        payloadManagerTextArea.clear();
                        payloadManagerTextArea.setWrapText(true);
                        payloadManagerTextArea.setText(readFile(selectedItem));
                    }
                }
            });

            // 添加删除操作
            deleteItem.setOnAction(event -> {
                CheckBoxTreeItem<TreeNodeBean> selectedItem = (CheckBoxTreeItem<TreeNodeBean>) payloadSelectTreeView.getSelectionModel().getSelectedItem();
                if (selectedItem != null) {
                    deleteFile(selectedItem);
                    CheckBoxTreeItem<TreeNodeBean> parent = (CheckBoxTreeItem<TreeNodeBean>) selectedItem.getParent();
                    if (parent != null) {
                        parent.getChildren().remove(selectedItem);
                        parent.getValue().getChildren().remove(selectedItem.getValue());
                    }
                    if (parent != null) {
                        while (parent.getParent() != null) {
                            parent = (CheckBoxTreeItem<TreeNodeBean>) parent.getParent();
                        }

                        ObservableList<TreeItem<TreeNodeBean>> children = parent.getChildren();
                        TreeNodeBean value = parent.getValue();
                        saveTreeToJson(JSON_FILE, children);
                    }


                }
            });

            // 添加新增操作
            addItem.setOnAction(event -> {
                CheckBoxTreeItem<TreeNodeBean> selectedItem = (CheckBoxTreeItem<TreeNodeBean>) payloadSelectTreeView.getSelectionModel().getSelectedItem();
                if (selectedItem != null && selectedItem.getValue().isGroup()) {
                    loadOtherTab(null, "addPayload.fxml", selectedItem);
                } else {
                    NotificationUtils.showNotification("非分组不可添加", Pos.CENTER);
                }
            });


        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    private String readFile(CheckBoxTreeItem<TreeNodeBean> selectedItem) {
        String basePath = "./config/allPayload/";
        String filePath = "";
        if (selectedItem.getChildren().isEmpty()) {
            filePath = selectedItem.getValue().getName() + ".txt";
            TreeItem<TreeNodeBean> parent = selectedItem.getParent();
            while (!parent.getValue().getName().equals("All Payload")) {
                filePath = parent.getValue().getName() + "/" + filePath;
                parent = parent.getParent();
            }
            File file = new File(basePath + filePath);
            if (file.exists()) {
                return FileUtils.readFileToString(basePath + filePath);
            } else {
                NotificationUtils.showNotification("payload不存在", Pos.CENTER);
            }
        } else {
            NotificationUtils.showNotification("请点击子节点", Pos.CENTER);
        }
        return "";
    }

    private void deleteFile(CheckBoxTreeItem<TreeNodeBean> selectedItem) {
        // 删除所选的指定文件或目录
        String basePath = "./config/allPayload/";
        String filePath = selectedItem.getValue().isGroup() ? selectedItem.getValue().getName() : selectedItem.getValue().getName() + ".txt";
        TreeItem<TreeNodeBean> parent = selectedItem.getParent();

        while (!parent.getValue().getName().equals("All Payload")) {
            filePath = parent.getValue().getName() + "/" + filePath;
            parent = parent.getParent();
        }
        File file = new File(basePath + filePath);
        if (file.isFile()) {
            file.delete();
        } else {
            FileUtils.deleteDirectoryRecursively(Paths.get(basePath + filePath));
        }
    }

    /**
     * 从JSON文件中加载所有的POC
     *
     * @param jsonFile
     * @throws IOException
     */
    private void loadTreeFromJson(String jsonFile) throws IOException {
        ObjectMapper objectMapper = new ObjectMapper();
        try {
            TreeNodeBean[] nodes = objectMapper.readValue(new File(jsonFile), TreeNodeBean[].class);
            int i = 0;
            for (TreeNodeBean node : nodes) {
                CheckBoxTreeItem<TreeNodeBean> item = new CheckBoxTreeItem<>(node);
                addChildren(item, node.getChildren());
                rootItem.getChildren().add(item);
                rootItem.getValue().getChildren().add(i, item.getValue());           // This
                i++;
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // 递归添加子节点
    private void addChildren(CheckBoxTreeItem<TreeNodeBean> parentItem, List<TreeNodeBean> children) {
        for (TreeNodeBean child : children) {
            CheckBoxTreeItem<TreeNodeBean> childItem = new CheckBoxTreeItem<>(child);
            parentItem.getChildren().add(childItem);
            addChildren(childItem, child.getChildren()); // 递归添加
        }
    }

    /**
     * 将当前树状图的内存保存至json文件
     *
     * @param jsonFile
     * @param value
     */
    private void saveTreeToJson(String jsonFile, ObservableList<TreeItem<TreeNodeBean>> value) {
        ObjectMapper objectMapper = new ObjectMapper();
        try {
            // 将 ObservableList 转换为 TreeNodeBean 数组
            TreeNodeBean[] nodeArray = new TreeNodeBean[value.size()];

            for (int i = 0; i < value.size(); i++) {
                nodeArray[i] = value.get(i).getValue(); // 获取 TreeItem 中的 TreeNodeBean
            }

//            TreeNodeBean rootNode = rootItem.getValue();
            objectMapper.writeValue(new File(jsonFile), nodeArray);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * 打开新增页面
     *
     * @param anchorPane
     * @param fxml
     * @param selectedItem
     */
    void loadOtherTab(AnchorPane anchorPane, String fxml, CheckBoxTreeItem<TreeNodeBean> selectedItem) {
        try {
            URL fxmlLocation = getClass().getResource("/ui/" + fxml);
            if (fxmlLocation == null) {
                NotificationUtils.showNotification("页面加载异常", Pos.CENTER);
            }
            FXMLLoader fxmlLoader = new FXMLLoader();
            fxmlLoader.setLocation(getClass().getResource("/ui/" + fxml));
            Parent root = fxmlLoader.load();


            if (anchorPane != null) {
                // 将内容添加到AnchorPane中
                anchorPane.getChildren().clear(); // 清空当前内容
                anchorPane.getChildren().add(root);
                // 将内容锚定到AnchorPane的四个边
                AnchorPane.setTopAnchor(root, 0.0);
                AnchorPane.setBottomAnchor(root, 0.0);
                AnchorPane.setLeftAnchor(root, 0.0);
                AnchorPane.setRightAnchor(root, 0.0);
            } else {

                AddPayloadController addPayloadController = fxmlLoader.getController();
                addPayloadController.setSelectedItem(selectedItem);

                // 创建新的 Stage
                Stage newWindow = new Stage();
                newWindow.setTitle("新增Payload");
                newWindow.initModality(Modality.APPLICATION_MODAL); // 设置为模态窗口
                newWindow.setScene(new Scene(root));

                // 显示窗口
                newWindow.showAndWait();


            }

        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
}
