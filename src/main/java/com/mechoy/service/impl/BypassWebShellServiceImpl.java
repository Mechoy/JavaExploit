package com.mechoy.service.impl;

import com.mechoy.bean.BypassBean;
import com.mechoy.bean.ResponseBean;
import com.mechoy.service.BypassWebShellService;

public class BypassWebShellServiceImpl implements BypassWebShellService {

    private ResponseBean responseBean = new ResponseBean();

    @Override
    public ResponseBean generateBypassWebShell(BypassBean bypassBean) {
        switch (bypassBean.getBypassType()) {
            case "dual-code(utf8AndCp037)":
                return dualCodeUTF8AndCp037(bypassBean);
            case "dual-code(utf16AndCp037)":
                return dualCodeUTF16AndCp037(bypassBean);
            case "dual-code(utf16AndCp1047)":
                return dualCodeUTF8AndCp1047(bypassBean);
            default:
                break;
        }
        responseBean.setStatus(500);
        responseBean.setError("生成错误");
        return responseBean;
    }

    /**
     * 双编码免杀，utf-8和cp037配合
     * GPT说：tomcat7、8、9可用
     *
     * @param bypassBean 传入的jsp内容
     * @return
     */
    private ResponseBean dualCodeUTF8AndCp037(BypassBean bypassBean) {
        responseBean.setStatus(200);
        responseBean.setResult("功能暂未开放");
        responseBean.setResultByte("功能暂未开放".getBytes());
        return responseBean;
    }

    private ResponseBean dualCodeUTF8AndCp1047(BypassBean bypassBean) {
        responseBean.setStatus(200);
        responseBean.setResult("功能暂未开放");
        responseBean.setResultByte("功能暂未开放".getBytes());
        return responseBean;

    }

    /**
     * 双编码免杀，utf-16和cp037配合
     * GPT说：tomcat7、8、9可用
     *
     * @param bypassBean
     * @return
     */
    private ResponseBean dualCodeUTF16AndCp037(BypassBean bypassBean) {
        responseBean.setStatus(200);
        responseBean.setResult("功能暂未开放");
        responseBean.setResultByte("功能暂未开放".getBytes());
        return responseBean;
    }
}
